/// <reference types="node" />
import type { IncomingHttpHeaders } from 'http';
declare type StaticOrigin = boolean | string | RegExp | (string | RegExp)[];
declare type CustomOrigin = (requestOrigin: string | undefined, callback: (err: Error | null, origin?: StaticOrigin) => void) => void;
interface CorsRequest {
    method?: string;
    headers: IncomingHttpHeaders;
}
export interface CorsOptions {
    origin?: StaticOrigin | CustomOrigin;
    methods?: string | string[];
    allowedHeaders?: string | string[];
    exposedHeaders?: string | string[];
    credentials?: boolean;
    maxAge?: number;
    preflightContinue?: boolean;
    optionsSuccessStatus?: number;
}
declare type CorsOptionsDelegate<T extends CorsRequest = CorsRequest> = (req: T, callback: (err: Error | null, options?: CorsOptions) => void) => void;
interface CorsRes {
    statusCode?: number;
    setHeader(key: string, value: string): any;
    end(): any;
}
declare type CorsNextFunc = (err?: any) => any;
export declare function cors<T extends CorsRequest = CorsRequest, Res extends CorsRes = CorsRes, Next extends CorsNextFunc = CorsNextFunc>(options?: CorsOptions | CorsOptionsDelegate<T> | undefined): (req: T, res: Res, next: Next) => void;
export default cors;
